---
name: multi_service_parallel_build
# use workflow_dispatch to run the GHA manually
# workflow_dispatch:
# use on: push: tags to run the GHA on tag change

on:
  push:
    tags: ['[0-9]+.[0-9]+.[0-9]+-?*']
env:
  TAG: ${{ github.ref }}
  REPO_NAME: ${{ github.repository }}
  ARGO_NAMESPACE: wl-<WL_NAME>-dev
  SEMVER_REGEX: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
  USE_CACHE: true # true of false
  USE_MIRROR: true # true or anything
jobs:
  multi_build:
    runs-on:
      group: <GIT_RUNNER_GROUP_NAME>
      labels: self-hosted
    steps:
      - name: semver_chk
        run: |
          TAG=`basename $TAG`
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo $TAG | grep -P $SEMVER_REGEX || { echo "Not a SEMVER tag, exitig."; exit 1; }
      - name: hostname and uname
        run: |
          hostname
          uname -a
          if [[ $( hostname | grep azure ) ]]; then  echo "It's azure runner. Exiting."; exit 1; fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: 'true'
      - name: argo cli install
        run: |
          # Download the binary
           curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.5.4/argo-linux-amd64.gz
           gunzip argo-linux-amd64.gz
           chmod +x argo-linux-amd64
           sudo mv ./argo-linux-amd64 /usr/local/bin/argo
           argo version
      - name: build
        # git clone and parallel kaniko build
        run: |
          set -eu
          declare -a CHANGED_WLS_DIRS
          echo "TAG: $TAG"
          DIFF_TAGS=`git tag --sort=-creatordate | grep -P $SEMVER_REGEX | head -2`
          if [[ `echo $DIFF_TAGS | wc -w` -gt 1 ]]
          then
            LIST_DIR=`git diff-tree --no-commit-id --dirstat=files,0  -r $DIFF_TAGS | awk  '{print $2;};' | sed -r 's/^([^/]*\/[^/]*)\/.*$/\1/'| uniq`
            if [[ "$LIST_DIR" =~ libs ]] && [[ -d apps ]]; then LIST_DIR=`ls -1d apps/*`;fi
          elif [[ -d apps ]]
          then
            LIST_DIR=`ls -1d apps/*`
          else
            LIST_DIR=`ls -1d */ | sed -r 's/\/$//'`
          fi
          echo "Directories w changes: "$LIST_DIR
          echo "Diff tags: "$DIFF_TAGS
          for DIR in $LIST_DIR
          do
            if [[ -e $DIR/src && -e $DIR/Dockerfile ]]
            then
              DIR=`echo $DIR| sed -r 's/\/$//'`
              CHANGED_WLS_DIRS+=("$DIR")
            fi
          done
          echo "CHANGED_WLS_DIRS=${CHANGED_WLS_DIRS[@]}">> "$GITHUB_ENV"
          # kaniko parallel start
          PIDS=()
          for wl_service_dir in ${CHANGED_WLS_DIRS[@]}
          do
              wl_service=`basename ${wl_service_dir}`
              if [[ ${wl_service_dir} =~ ^app ]]
                then
                    DOCKERFILE="${wl_service_dir}/Dockerfile"
                    BUILD_CONTEXT=""
                else
                    DOCKERFILE="Dockerfile"
                    BUILD_CONTEXT="${wl_service_dir}"
              fi
              if [[ $USE_MIRROR != "true" ]]; then MIRROR_OPTION_STR="-p kaniko-registry-mirror=NOMIRROR"; else MIRROR_OPTION_STR=""; fi
              argo submit .argo/build-wf.yaml \
                    --generate-name ${wl_service}-wf-build- \
                    $MIRROR_OPTION_STR \
                    -p kaniko-cache=$USE_CACHE \
                    -p repo=git@github.com:<GIT_ORGANIZATION_NAME>/<WL_REPO_NAME>.git\
                    -p wl-service-name=$wl_service \
                    -p workload-name=<WL_REPO_NAME> \
                    -p tag=$TAG \
                    -p dockerfile=${DOCKERFILE} \
                    -p build-context=${BUILD_CONTEXT} \
                    -p wl-service-dir=${wl_service_dir} \
                    --serviceaccount argo-workflow \
                    --wait > /dev/null &

              PIDS+=($!)
          done
          for PID in "${PIDS[@]}"
          do
            if  wait -n
            then
                :
            else
                exit_status=$?
                echo "EXIT STATUS $exit_status"
                argo list -l stage=build
                argo terminate -l stage=build
                exit $exit_status
            fi
          done
          echo "All builds succeeded."
# parallel crane
      - name: registry_put
        env:
          CHANGED_WLS_DIRS: ${{ env.CHANGED_WLS_DIRS }}
        run: |-
          echo "CHANGED workload-services (array): ${CHANGED_WLS_DIRS[@]}"
          PIDS=()
          for wl_service_dir in ${CHANGED_WLS_DIRS[@]}
          do
            wl_service=`basename ${wl_service_dir}`
            argo submit .argo/crane-wf.yaml --serviceaccount argo-workflow \
            --generate-name ${wl_service}-wf-crane- \
            -p tag=$TAG \
            -p workload-name=<WL_REPO_NAME> \
            -p wl-service-name=$wl_service \
            -p wl-service-dir=$wl_service_dir \
            --wait > /dev/null  &
            PIDS+=($!)
          done
          for PID in "${PIDS[@]}"
          do
            if  wait -n
            then
              :
            else
              exit_status=$?
              echo "EXIT STATUS $exit_status"
              argo list -l stage=crane
              argo terminate -l stage=crane
              exit $exit_status
            fi
          done
          echo "All crane puts succeeded."
      - name: version change in gitops repo
        env:
          CHANGED_WLS_DIRS: ${{ env.CHANGED_WLS_DIRS }}
        run: |-
          echo "CHANGED workload-services (array): ${CHANGED_WLS_DIRS[@]}"
          if [[ ${#CHANGED_WLS_DIRS[@]} -gt 0 ]]
          then
             echo "${CHANGED_WLS_DIRS[@]}"
               argo submit .argo/version-changer-wf.yaml \
              -p gitops-repo=git@github.com:<GIT_ORGANIZATION_NAME>/<WL_GITOPS_REPO_NAME>.git \
              -p wl-service-list="${CHANGED_WLS_DIRS[@]}" \
              -p env-path="gitops/environments/envs" \
              -p env-name="dev" \
              -p tag=${TAG} \
              --serviceaccount argo-workflow \
              --wait --log
          fi
